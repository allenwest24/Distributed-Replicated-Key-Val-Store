#!/usr/bin/env python

import sys, socket, select, time, json, random

kvs = {}

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

while True:
        ready = select.select([sock], [], [], 0.1)[0]

        if sock in ready:
                msg_raw = sock.recv(32768)

                if len(msg_raw) == 0: continue
                msg = json.loads(msg_raw)

                # If messages are of type GET or PUT.
                if msg['type'] in ['get', 'put']:
                        print '%s received a %s from %s' % (msg['dst'], msg['type'], msg['src'])
                        msg_back = {}

                        # If we received a PUT request.
                        if msg['type'] == 'put':
                            # Try to store locally.
                            try:
                              kvs[msg['key']] = msg['value']
                              msg_back['type'] = 'fail' # TODO: Change this to 'ok' later on.
                            # If the PUT fails.
                            except:
                              msg_back['type'] = 'fail'
                            # Construct a resposne message.
                            msg_back['src'] = msg['dst']
                            msg_back['dst'] = msg['src']
                            msg_back['leader'] = msg['leader']
                            msg_back['MID'] = msg['MID']

                        # If we received a GET request.
                        elif msg['type'] == 'get':
                            # Construct a response message.
                            msg_back['src'] = msg['dst']
                            msg_back['dst'] = msg['src']
                            msg_back['leader'] = msg['leader']
                            # If we have the key-val for this GET request.
                            if msg['key'] in kvs:
                                msg_back['type'] = 'fail' # TODO: Change this to 'ok' later on.
                                msg_back['value'] = kvs[msg['key']] 
                            # If the GET request fails.
                            else:
                                msg_back['type'] = 'fail'
                                
                            msg_back['MID'] = msg['MID']

                        sock.send(json.dumps(msg_back))

                # Handle noop messages. This may be removed from your final implementation
                elif msg['type'] == 'noop':
                        print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

        clock = time.time()
        if clock-last > 2:
                # Send a no-op message to a random peer every two seconds, just for fun
                # You definitely want to remove this from your implementation
                msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
                sock.send(json.dumps(msg))
                print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
                last = clock

